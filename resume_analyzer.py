# -*- coding: utf-8 -*-
"""Resume_Analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qIfJnssOo2hBN1VoWrqd0AXjUK8eCrrn
"""

import streamlit as st
import PyMuPDf
import docx
from sentence_transformers import SentenceTransformer, util

# Load the model
@st.cache_resource
def load_model():
    return SentenceTransformer('all-MiniLM-L6-v2')

model = load_model()

# Function to extract text from PDF
def extract_text_from_pdf(uploaded_file):
    doc = pymupdf.open(stream=uploaded_file.read(), filetype="pdf")
    text = ""
    for page in doc:
        text += page.get_text()
    return text

# Function to extract text from Word
def extract_text_from_docx(uploaded_file):
    doc = docx.Document(uploaded_file)
    return "\n".join([para.text for para in doc.paragraphs])

# Streamlit UI
st.set_page_config(page_title="Resume Matcher", layout="centered")
st.title("üìÑ Resume & Job Description Matcher")

st.markdown("Upload your **resume** and **job description** to compute a match score (0‚Äì100).")

# Job Description Input
st.subheader("üìå Job Description")

jd_input_type = st.radio("Input JD as:", ["Text Input", "Upload Word (.docx)"])

if jd_input_type == "Text Input":
    job_description = st.text_area("Enter job description", height=200)
else:
    jd_file = st.file_uploader("Upload JD (.docx)", type=["docx"])
    job_description = extract_text_from_docx(jd_file) if jd_file else ""

# Resume Upload
st.subheader("üìé Upload Resume")
resume_file = st.file_uploader("Upload Resume (.pdf or .docx)", type=["pdf", "docx"])

resume_text = ""
if resume_file:
    if resume_file.name.endswith(".pdf"):
        resume_text = extract_text_from_pdf(resume_file)
    elif resume_file.name.endswith(".docx"):
        resume_text = extract_text_from_docx(resume_file)

# Run match
if st.button("üîç Match Resume to JD"):
    if not job_description.strip() or not resume_text.strip():
        st.warning("Please upload both a resume and a job description.")
    else:
        jd_embed = model.encode(job_description, convert_to_tensor=True)
        resume_embed = model.encode(resume_text, convert_to_tensor=True)

        score = util.cos_sim(resume_embed, jd_embed).item() * 100
        st.success(f"‚úÖ Resume Match Score: **{score:.2f}/100**")

        if score < 50:
            st.info("üí° Try improving keyword relevance or aligning experience with JD.")
